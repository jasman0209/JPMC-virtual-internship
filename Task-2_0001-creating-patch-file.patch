From 6cd9e1f49f3a86b91655973d24e3c13204f66cbe Mon Sep 17 00:00:00 2001
From: jasman0209 <jasmanpreet0209@gmail.com>
Date: Fri, 1 May 2020 03:48:31 +0530
Subject: [PATCH] creating patch file

---
 src/App.tsx   | 27 ++++++++++++++++++++-------
 src/Graph.tsx | 18 ++++++++++++++----
 2 files changed, 34 insertions(+), 11 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..2cab3d8 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,8 +8,8 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
-
 /**
  * The parent element of the react app.
  * It renders title, button and Graph react element.
@@ -18,10 +18,11 @@ class App extends Component<{}, IState> {
   constructor(props: {}) {
     super(props);
 
-    this.state = {
+    this.state ={
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +30,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
+    
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+    let x=0;
+    const interval= setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
     });
+    x++;
+    if(x>1000){
+      clearInterval(interval);
+    }
+  },100);
+    
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..cc481b1 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,21 +32,31 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
       top_bid_price: 'float',
       timestamp: 'date',
     };
+    
 
     if (window.perspective && window.perspective.worker()) {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column_pivots', '["stock"]');
+      elem.setAttribute('row_pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates','{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}'); 
+      const schema = {
+        stock: 'string',
+        top_ask_price: 'float',
+        top_bid_price: 'float',
+        timestamp: 'date',
+      };
       // Add more Perspective configurations here.
       elem.load(this.table);
     }
-- 
2.25.1.windows.1

